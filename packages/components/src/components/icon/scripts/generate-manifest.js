/**
 * Script to generate icon-manifest.ts from SVG files
 *
 * This script scans the assets/icons directory and generates a TypeScript
 * manifest with all available icon names and a dynamic loader function.
 *
 * Run with: node scripts/generate-manifest.js
 */

import { readdir, writeFile } from 'fs/promises';
import { join, basename, dirname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const ICONS_DIR = join(__dirname, '../assets/icons');
const OUTPUT_FILE = join(__dirname, '../icon-manifest.ts');

async function generateManifest() {
  console.log('üîç Scanning icons directory...');

  // Read all SVG files
  const files = await readdir(ICONS_DIR);
  const svgFiles = files.filter(file => file.endsWith('.svg'));

  console.log(`‚úÖ Found ${svgFiles.length} SVG icons`);

  // Extract icon names (remove .svg extension)
  const iconNames = svgFiles
    .map(file => basename(file, '.svg'))
    .sort(); // Alphabetical order

  // Generate TypeScript content
  const content = `/**
 * AUTO-GENERATED FILE - DO NOT EDIT MANUALLY
 *
 * Generated by: scripts/generate-manifest.js
 * Generated on: ${new Date().toISOString()}
 * Total icons: ${iconNames.length}
 *
 * This file provides:
 * - Type-safe icon names (IconName type)
 * - List of all available icons (iconNames array)
 * - Dynamic SVG loader with Vite ?raw imports
 */

/**
 * All available icon names from Lucide
 * Total: ${iconNames.length} icons
 */
export const iconNames = [
${iconNames.map(name => `  '${name}',`).join('\n')}
] as const;

/**
 * Type-safe icon name
 * Use this type for icon name props to get autocomplete
 */
export type IconName = typeof iconNames[number];

/**
 * Check if a string is a valid icon name
 * @param name - Name to validate
 * @returns true if the name corresponds to an available icon
 */
export function isValidIconName(name: string): name is IconName {
  return iconNames.includes(name as IconName);
}

/**
 * Dynamically load an icon's SVG content
 * Uses Vite's ?raw import for tree-shaking
 *
 * @param name - Icon name to load
 * @returns Promise with SVG string content
 * @throws Error if icon doesn't exist
 *
 * @example
 * const svg = await loadIconSvg('star');
 * element.innerHTML = svg;
 */
export async function loadIconSvg(name: IconName): Promise<string> {
  try {
    // Vite will tree-shake unused imports at build time
    const svgModule = await import(\`./assets/icons/\${name}.svg?raw\`);
    return svgModule.default;
  } catch (error) {
    throw new Error(\`Failed to load icon "\${name}": \${error}\`);
  }
}

/**
 * Get total number of available icons
 */
export const ICON_COUNT = ${iconNames.length};
`;

  // Write to file
  await writeFile(OUTPUT_FILE, content, 'utf-8');

  console.log(`\n‚ú® Generated icon-manifest.ts successfully!`);
  console.log(`üìù File: ${OUTPUT_FILE}`);
  console.log(`üìä Total icons: ${iconNames.length}`);
  console.log(`\nüí° Usage example:`);
  console.log(`   import { loadIconSvg } from './icon-manifest';`);
  console.log(`   const svg = await loadIconSvg('star');`);
}

// Run the script
generateManifest().catch(error => {
  console.error('‚ùå Error generating manifest:', error);
  process.exit(1);
});
